name: CI

on:
  push:
    branches:
    - '**'
  workflow_dispatch:

jobs:
  frontend:
    runs-on: ubuntu-latest
    defaults:
      run:
        working-directory: frontend
    
    steps:
    - name: Checkout frontend
      uses: actions/checkout@v4
      with:
        sparse-checkout: frontend
    - name: Install Node.js
      uses: actions/setup-node@v4
      with:
        node-version: '23'
    - name: Install dependencies
      run: npm install
    - name: Run unit tests
      run: npm test
    - name: Run eslint
      run: npm run lint
    - name: Run prettier
      run: npm run prettier-check
  
  backend:
    runs-on: ubuntu-latest
    defaults:
      run:
        working-directory: backend
    services:
      postgres:
        image: postgres:latest
        env:
          POSTGRES_USER: libraryapp
          POSTGRES_PASSWORD: salainen
          POSTGRES_DB: libraryapp
        ports:
          - 5432:5432
        options: --health-cmd pg_isready --health-interval 10s --health-timeout 5s --health-retries 5

    steps:
    - name: Checkout
      uses: actions/checkout@v4
      with:
        sparse-checkout: backend
    - name: Install Node.js
      uses: actions/setup-node@v4
      with:
        node-version: '23'
    - name: Install dependencies
      run: npm install
    - name: Run unit tests
      run: npm test
      env:
        TEST_DATABASE_URL: postgres://libraryapp:salainen@localhost:5432/libraryapp
    - name: Run eslint
      run: npm run lint
    - name: Run prettier
      run: npm run prettier-check
  
  deploy-staging:
    needs: [frontend, backend]
    if: github.ref == 'refs/heads/staging' && github.event_name == 'push'
    runs-on: ubuntu-24.04
    steps:
    - name: Checkout
      uses: actions/checkout@v2
    - name: Install Heroku CLI
      run: |
        curl https://cli-assets.heroku.com/install.sh | sh
    - name: Set Heroku stack to container
      run: heroku stack:set container --app ${{ secrets.HEROKU_STAGING_APP_NAME }}
      env:
        HEROKU_API_KEY: ${{ secrets.HEROKU_API_KEY }}
        HEROKU_APP_NAME: ${{ secrets.HEROKU_STAGING_APP_NAME }}
    - name: Heroku deploy
      uses: akhileshns/heroku-deploy@v3.13.15
      with:
        heroku_api_key: ${{secrets.HEROKU_API_KEY}}
        heroku_app_name: ${{secrets.HEROKU_STAGING_APP_NAME}}
        heroku_email: ${{secrets.HEROKU_EMAIL}}
        usedocker: true
        stack: "container"
        branch: "staging"
      env:
        HD_GOOGLE_CLIENT_ID: ${{ secrets.STAGING_GOOGLE_CLIENT_ID }}
        HD_GOOGLE_CLIENT_SECRET: ${{ secrets.STAGING_GOOGLE_CLIENT_SECRET }}
        HD_GOOGLE_OAUTH_REDIRECT_URI: ${{ secrets.STAGING_GOOGLE_OAUTH_REDIRECT_URI }}
        HD_JWT_SECRET: ${{ secrets.JWT_SECRET }}
        HD_CRON_SECRET: ${{ secrets.CRON_SECRET }}
        HD_SLACK_BOT_TOKEN: ${{ secrets.SLACK_BOT_TOKEN }}
        HD_SLACK_WEBHOOK_URL: ${{ secrets.SLACK_WEBHOOK_URL }}
  
  deploy-production:
    needs: [frontend, backend]
    if: github.ref == 'refs/heads/main' && github.event_name == 'push'
    runs-on: ubuntu-24.04
    steps:
    - name: Checkout
      uses: actions/checkout@v2
    - name: Install Heroku CLI
      run: |
        curl https://cli-assets.heroku.com/install.sh | sh
    - name: Set Heroku stack to container
      run: heroku stack:set container --app ${{ secrets.HEROKU_APP_NAME }}
      env:
        HEROKU_API_KEY: ${{ secrets.HEROKU_API_KEY }}
        HEROKU_APP_NAME: ${{ secrets.HEROKU_APP_NAME }}
    - name: Heroku deploy
      uses: akhileshns/heroku-deploy@v3.13.15
      with:
        heroku_api_key: ${{secrets.HEROKU_API_KEY}}
        heroku_app_name: ${{secrets.HEROKU_APP_NAME}}
        heroku_email: ${{secrets.HEROKU_EMAIL}}
        usedocker: true
        stack: "container"
      env:
        HD_GOOGLE_CLIENT_ID: ${{ secrets.GOOGLE_CLIENT_ID }}
        HD_GOOGLE_CLIENT_SECRET: ${{ secrets.GOOGLE_CLIENT_SECRET }}
        HD_GOOGLE_OAUTH_REDIRECT_URI: ${{ secrets.GOOGLE_OAUTH_REDIRECT_URI }}
        HD_JWT_SECRET: ${{ secrets.JWT_SECRET }}
        HD_CRON_SECRET: ${{ secrets.CRON_SECRET }}
        HD_SLACK_BOT_TOKEN: ${{ secrets.SLACK_BOT_TOKEN }}
        HD_SLACK_WEBHOOK_URL: ${{ secrets.SLACK_WEBHOOK_URL }}

lighthouse-staging:
    needs: deploy-staging
    if: github.ref == 'refs/heads/staging' && github.event_name == 'push'
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v3
      - name: Use Node.js
        uses: actions/setup-node@v3
        with:
          node-version: 16.x
      - name: npm install
        run: npm install -g @lhci/cli@0.14.x
      - name: run Lighthouse CI
        run: |
          lhci autorun --config=./lighthouserc.json
        env:
          LHCI_BUILD_CONTEXT__CURRENT_BRANCH: staging
          LHCI_BUILD_CONTEXT__GITHUB_ACTOR: ${{ github.actor }}
          LHCI_BUILD_CONTEXT__GITHUB_EVENT_NAME: ${{ github.event_name }}
          LHCI_BUILD_CONTEXT__GITHUB_REPOSITORY: ${{ github.repository }}
          LHCI_BUILD_CONTEXT__GITHUB_SHA: ${{ github.sha }}
          LHCI_BUILD_CONTEXT__GITHUB_REF: ${{ github.ref }}
          LHCI_TARGET_URL: https://${{ secrets.HEROKU_STAGING_APP_NAME }}.herokuapp.com