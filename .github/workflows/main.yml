name: CI

on:
  push:
    branches:
    - '**'
  workflow_dispatch:

jobs:
  frontend:
    runs-on: ubuntu-latest
    defaults:
      run:
        working-directory: frontend
    
    steps:
    - name: Checkout frontend
      uses: actions/checkout@v4
      with:
        sparse-checkout: frontend
    - name: Install Node.js
      uses: actions/setup-node@v4
      with:
        node-version: '23'
    - name: Install dependencies
      run: npm install
    - name: Run unit tests
      run: npm test
    - name: Run eslint
      run: npm run lint
    - name: Run prettier
      run: npm run prettier-check
  
  backend:
    runs-on: ubuntu-latest
    defaults:
      run:
        working-directory: backend
    services:
      postgres:
        image: postgres:latest
        env:
          POSTGRES_USER: libraryapp
          POSTGRES_PASSWORD: salainen
          POSTGRES_DB: libraryapp
        ports:
          - 5432:5432
        options: --health-cmd pg_isready --health-interval 10s --health-timeout 5s --health-retries 5
    steps:
    - name: Checkout
      uses: actions/checkout@v4
      with:
        sparse-checkout: backend
    - name: Install Node.js
      uses: actions/setup-node@v4
      with:
        node-version: '23'
    - name: Install dependencies
      run: npm install
    - name: Run unit tests
      run: npm test
      env:
        TEST_DATABASE_URL: postgres://libraryapp:salainen@localhost:5432/libraryapp
    - name: Run eslint
      run: npm run lint
    - name: Run prettier
      run: npm run prettier-check
  
  deploy-staging:
    needs: [frontend, backend]
    if: github.ref == 'refs/heads/staging' && github.event_name == 'push'
    runs-on: ubuntu-24.04
    steps:
    - name: Checkout
      uses: actions/checkout@v2
    - name: Install Heroku CLI
      run: |
        curl https://cli-assets.heroku.com/install.sh | sh
    - name: Set Heroku stack to container
      run: heroku stack:set container --app ${{ secrets.HEROKU_STAGING_APP_NAME }}
      env:
        HEROKU_API_KEY: ${{ secrets.HEROKU_API_KEY }}
        HEROKU_APP_NAME: ${{ secrets.HEROKU_STAGING_APP_NAME }}
    - name: Heroku deploy
      uses: akhileshns/heroku-deploy@v3.13.15
      with:
        heroku_api_key: ${{secrets.HEROKU_API_KEY}}
        heroku_app_name: ${{secrets.HEROKU_STAGING_APP_NAME}}
        heroku_email: ${{secrets.HEROKU_EMAIL}}
        usedocker: true
        stack: "container"
        branch: "staging"
      env:
        HD_GOOGLE_CLIENT_ID: ${{ secrets.STAGING_GOOGLE_CLIENT_ID }}
        HD_GOOGLE_CLIENT_SECRET: ${{ secrets.STAGING_GOOGLE_CLIENT_SECRET }}
        HD_GOOGLE_OAUTH_REDIRECT_URI: ${{ secrets.STAGING_GOOGLE_OAUTH_REDIRECT_URI }}
        HD_JWT_SECRET: ${{ secrets.JWT_SECRET }}
        HD_CRON_SECRET: ${{ secrets.CRON_SECRET }}
        HD_SLACK_BOT_TOKEN: ${{ secrets.SLACK_BOT_TOKEN }}
        HD_SLACK_WEBHOOK_URL: ${{ secrets.SLACK_WEBHOOK_URL }}
        HD_STAGING: 1
  lhci:
    needs: [deploy-staging]
    runs-on: ubuntu-latest
    permissions:
      contents: write
      id-token: write
    defaults:
      run:
        working-directory: lighthouse    
    steps:
      - name: checkout
        uses: actions/checkout@v4
        with:
          sparse-checkout: lighthouse
      - name: extract-user-token
        run: |
          TOKEN=$(
            curl --header "Content-Type: application/json" \
              --request POST \
              --data '{"secret": "${{secrets.CRON_SECRET}}"}' \
              -s -i "https://ohtu-library-staging-c43b89853868.herokuapp.com/api/testing/login" |
              grep -i 'Set-Cookie' |
              tr ',' '\n' |
              grep 'token=' |
              sed -n 's/.*token=\([^;]*\).*/\1/p'
          )

          echo "token=${TOKEN}" >> $GITHUB_OUTPUT
        id: bearer_token
      - name: Install Node.js
        uses: actions/setup-node@v4
        with:
          node-version: '20'
      - name: Install dependencies
        run: npm install
      - name: lighthouse
        run: |
          result=$(node lighthouse-ci.js "https://ohtu-library-staging-c43b89853868.herokuapp.com" "${{steps.bearer_token.outputs.token}}" | tail -n 1)
          echo "Lighthouse accessibility score: $result" 
          echo "score=$result" >> $GITHUB_OUTPUT
        id: lh_score
      - name: ligthouse badge
        uses: RubbaBoy/BYOB@v1.3.0
        with:
          NAME: las
          LABEL: 'Lighthouse'
          STATUS: "${{steps.lh_score.outputs.score}}/100"  
          COLOR: blue
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}



    
  deploy-production:
    needs: [frontend, backend]
    if: github.ref == 'refs/heads/main' && github.event_name == 'push'
    runs-on: ubuntu-24.04
    steps:
    - name: Checkout
      uses: actions/checkout@v2
    - name: Install Heroku CLI
      run: |
        curl https://cli-assets.heroku.com/install.sh | sh
    - name: Set Heroku stack to container
      run: heroku stack:set container --app ${{ secrets.HEROKU_APP_NAME }}
      env:
        HEROKU_API_KEY: ${{ secrets.HEROKU_API_KEY }}
        HEROKU_APP_NAME: ${{ secrets.HEROKU_APP_NAME }}
    - name: Heroku deploy
      uses: akhileshns/heroku-deploy@v3.13.15
      with:
        heroku_api_key: ${{secrets.HEROKU_API_KEY}}
        heroku_app_name: ${{secrets.HEROKU_APP_NAME}}
        heroku_email: ${{secrets.HEROKU_EMAIL}}
        usedocker: true
        stack: "container"
      env:
        HD_GOOGLE_CLIENT_ID: ${{ secrets.GOOGLE_CLIENT_ID }}
        HD_GOOGLE_CLIENT_SECRET: ${{ secrets.GOOGLE_CLIENT_SECRET }}
        HD_GOOGLE_OAUTH_REDIRECT_URI: ${{ secrets.GOOGLE_OAUTH_REDIRECT_URI }}
        HD_JWT_SECRET: ${{ secrets.JWT_SECRET }}
        HD_CRON_SECRET: ${{ secrets.CRON_SECRET }}
        HD_SLACK_BOT_TOKEN: ${{ secrets.SLACK_BOT_TOKEN }}
        HD_SLACK_WEBHOOK_URL: ${{ secrets.SLACK_WEBHOOK_URL }}
        HD_PRODUCTION: 1